// Generated by https://quicktype.io

// Converts JSON strings to/from your types
// and asserts the results of JSON.parse at runtime
function toDaTA(json) {
  return cast(JSON.parse(json), a(r("DaTA")));
}

function daTAToJson(value) {
  return JSON.stringify(uncast(value, a(r("DaTA"))), null, 2);
}

function invalidValue(typ, val) {
  throw Error(
    `Invalid value ${JSON.stringify(val)} for type ${JSON.stringify(typ)}`
  );
}

function jsonToJSProps(typ) {
  if (typ.jsonToJS === undefined) {
    var map = {};
    typ.props.forEach((p) => (map[p.json] = { key: p.js, typ: p.typ }));
    typ.jsonToJS = map;
  }
  return typ.jsonToJS;
}

function jsToJSONProps(typ) {
  if (typ.jsToJSON === undefined) {
    var map = {};
    typ.props.forEach((p) => (map[p.js] = { key: p.json, typ: p.typ }));
    typ.jsToJSON = map;
  }
  return typ.jsToJSON;
}

function transform(val, typ, getProps) {
  function transformPrimitive(typ, val) {
    if (typeof typ === typeof val) return val;
    return invalidValue(typ, val);
  }

  function transformUnion(typs, val) {
    // val must validate against one typ in typs
    var l = typs.length;
    for (var i = 0; i < l; i++) {
      var typ = typs[i];
      try {
        return transform(val, typ, getProps);
      } catch (_) {}
    }
    return invalidValue(typs, val);
  }

  function transformEnum(cases, val) {
    if (cases.indexOf(val) !== -1) return val;
    return invalidValue(cases, val);
  }

  function transformArray(typ, val) {
    // val must be an array with no invalid elements
    if (!Array.isArray(val)) return invalidValue("array", val);
    return val.map((el) => transform(el, typ, getProps));
  }

  function transformObject(props, additional, val) {
    if (val === null || typeof val !== "object" || Array.isArray(val)) {
      return invalidValue("object", val);
    }
    var result = {};
    Object.getOwnPropertyNames(props).forEach((key) => {
      const prop = props[key];
      const v = Object.prototype.hasOwnProperty.call(val, key)
        ? val[key]
        : undefined;
      result[prop.key] = transform(v, prop.typ, getProps);
    });
    Object.getOwnPropertyNames(val).forEach((key) => {
      if (!Object.prototype.hasOwnProperty.call(props, key)) {
        result[key] = transform(val[key], additional, getProps);
      }
    });
    return result;
  }

  if (typ === "any") return val;
  if (typ === null) {
    if (val === null) return val;
    return invalidValue(typ, val);
  }
  if (typ === false) return invalidValue(typ, val);
  while (typeof typ === "object" && typ.ref !== undefined) {
    typ = typeMap[typ.ref];
  }
  if (Array.isArray(typ)) return transformEnum(typ, val);
  if (typeof typ === "object") {
    return typ.hasOwnProperty("unionMembers")
      ? transformUnion(typ.unionMembers, val)
      : typ.hasOwnProperty("arrayItems")
      ? transformArray(typ.arrayItems, val)
      : typ.hasOwnProperty("props")
      ? transformObject(getProps(typ), typ.additional, val)
      : invalidValue(typ, val);
  }
  return transformPrimitive(typ, val);
}

function cast(val, typ) {
  return transform(val, typ, jsonToJSProps);
}

function uncast(val, typ) {
  return transform(val, typ, jsToJSONProps);
}

function a(typ) {
  return { arrayItems: typ };
}

function u(...typs) {
  return { unionMembers: typs };
}

function o(props, additional) {
  return { props, additional };
}

function m(additional) {
  return { props: [], additional };
}

function r(name) {
  return { ref: name };
}

const typeMap = {
  DaTA: o(
    [
      { json: "updated", js: "updated", typ: 0 },
      { json: "country", js: "country", typ: "" },
      { json: "countryInfo", js: "countryInfo", typ: r("CountryInfo") },
      { json: "cases", js: "cases", typ: 0 },
      { json: "todayCases", js: "todayCases", typ: 0 },
      { json: "deaths", js: "deaths", typ: 0 },
      { json: "todayDeaths", js: "todayDeaths", typ: 0 },
      { json: "recovered", js: "recovered", typ: 0 },
      { json: "todayRecovered", js: "todayRecovered", typ: 0 },
      { json: "active", js: "active", typ: 0 },
      { json: "critical", js: "critical", typ: 0 },
      { json: "casesPerOneMillion", js: "casesPerOneMillion", typ: 0 },
      { json: "deathsPerOneMillion", js: "deathsPerOneMillion", typ: 3.14 },
      { json: "tests", js: "tests", typ: 0 },
      { json: "testsPerOneMillion", js: "testsPerOneMillion", typ: 0 },
      { json: "population", js: "population", typ: 0 },
      { json: "continent", js: "continent", typ: r("Continent") },
      { json: "oneCasePerPeople", js: "oneCasePerPeople", typ: 0 },
      { json: "oneDeathPerPeople", js: "oneDeathPerPeople", typ: 0 },
      { json: "oneTestPerPeople", js: "oneTestPerPeople", typ: 0 },
      { json: "activePerOneMillion", js: "activePerOneMillion", typ: 3.14 },
      {
        json: "recoveredPerOneMillion",
        js: "recoveredPerOneMillion",
        typ: 3.14,
      },
      { json: "criticalPerOneMillion", js: "criticalPerOneMillion", typ: 3.14 },
    ],
    false
  ),
  CountryInfo: o(
    [
      { json: "_id", js: "_id", typ: u(0, null) },
      { json: "iso2", js: "iso2", typ: u(null, "") },
      { json: "iso3", js: "iso3", typ: u(null, "") },
      { json: "lat", js: "lat", typ: 3.14 },
      { json: "long", js: "long", typ: 3.14 },
      { json: "flag", js: "flag", typ: "" },
    ],
    false
  ),
  Continent: [
    "Africa",
    "Asia",
    "Australia/Oceania",
    "",
    "Europe",
    "North America",
    "South America",
  ],
};

module.exports = {
  daTAToJson: daTAToJson,
  toDaTA: toDaTA,
};
